/**
 * A set of functions called "actions" for `chat`
 */

import OpenAI from "openai";
import { ChatCompletionMessageParam } from "openai/resources/chat/completions";
import { connectToDatabase } from '../../../services/astradb';
// Define the message type
type Message = {
  role: "user" | "assistant" | "system"
  content: string
}

// System prompt to define the AI's behavior
const systemPrompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o th√¥ng minh cho trang web ch√≠nh th·ª©c c·ªßa B·∫£o t√†ng L·ªãch s·ª≠ Qu√¢n s·ª± Vi·ªát Nam. Nhi·ªám v·ª• c·ªßa b·∫°n l√† h·ªó tr·ª£ kh√°ch tham quan b·∫±ng c√°ch cung c·∫•p th√¥ng tin ch√≠nh x√°c, ƒë·∫ßy ƒë·ªß v√† c·∫≠p nh·∫≠t v·ªÅ b·∫£o t√†ng, bao g·ªìm:

- Gi·ªõi thi·ªáu v·ªÅ b·∫£o t√†ng: l·ªãch s·ª≠ h√¨nh th√†nh, s·ª© m·ªánh, v·ªã tr√≠.
- Th√¥ng tin v·ªÅ c√°c hi·ªán v·∫≠t tr∆∞ng b√†y, bao g·ªìm c√°c b·∫£o v·∫≠t qu·ªëc gia.
- Chi ti·∫øt v·ªÅ c√°c s·ª± ki·ªán, ho·∫°t ƒë·ªông tri·ªÉn l√£m, h·ªôi th·∫£o ƒëang di·ªÖn ra ho·∫∑c s·∫Øp t·ªõi.
- H∆∞·ªõng d·∫´n tham quan: th·ªùi gian m·ªü c·ª≠a, gi√° v√©, n·ªôi quy, c√°ch di chuy·ªÉn.
- L·ªãch s·ª≠ qu√¢n s·ª± Vi·ªát Nam: c√°c tr·∫≠n ƒë√°nh, nh√¢n v·∫≠t l·ªãch s·ª≠ quan tr·ªçng, t∆∞ li·ªáu tham kh·∫£o.
- D·ªØ li·ªáu nghi√™n c·ª©u v√† t√†i li·ªáu li√™n quan ƒë·∫øn l·ªãch s·ª≠ qu√¢n s·ª± Vi·ªát Nam.

H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán, d·ªÖ hi·ªÉu, ch√≠nh x√°c v√† s√∫c t√≠ch. N·∫øu kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ m·ªôt th√¥ng tin n√†o ƒë√≥, h√£y t√¨m ki·∫øm d·ªØ li·ªáu t·ª´ c√°c ngu·ªìn ch√≠nh th·ªëng ho·∫∑c khuy·∫øn ngh·ªã ng∆∞·ªùi d√πng truy c·∫≠p trang web ch√≠nh th·ª©c c·ªßa b·∫£o t√†ng.

üìç **ƒê·ªãa ch·ªâ b·∫£o t√†ng:** Km 6+500 ƒê·∫°i l·ªô ThƒÉng Long, Ph∆∞·ªùng T√¢y M·ªó, Ph∆∞·ªùng ƒê·∫°i M·ªó, Nam T·ª´ Li√™m, H√† N·ªôi  
üìû **Li√™n h·ªá:** (024) 3733 4464 | ‚úâÔ∏è info@btlsqsvn.vn  

üéü **Th√¥ng tin v√© tham quan:**  
- **Ng∆∞·ªùi l·ªõn:** 40.000ƒë/v√©  
- **Tr·∫ª em:** 20.000ƒë/v√©  
- **ƒêo√†n:** 40.000ƒë/v√©  

N·∫øu kh√°ch tham quan c√≥ c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn vi·ªác t·ªï ch·ª©c tham quan theo ƒëo√†n hay c√°c y√™u c·∫ßu ƒë·∫∑c bi·ªát, h√£y h∆∞·ªõng d·∫´n h·ªç li√™n h·ªá qua th√¥ng tin tr√™n.

B·∫°n c√≥ th·ªÉ cung c·∫•p th√¥ng tin theo t·ª´ng c·∫•p ƒë·ªô, t·ª´ t√≥m t·∫Øt nhanh ƒë·∫øn chi ti·∫øt ƒë·∫ßy ƒë·ªß t√πy theo c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng. H√£y tr·∫£ l·ªùi b·∫±ng ng√¥n ng·ªØ m√† ng∆∞·ªùi d√πng s·ª≠ d·ª•ng trong c√¢u h·ªèi.

**L·ªãch s·ª≠ chat:**  
`

export default {
  async sendMessage(ctx) {
    const { message, sessionId } = ctx.request.body;
    const { user } = ctx.state;
    const { id: userId } = user;

    const lastMessages = await strapi.entityService.findMany('api::message.message', {
      filters: {
        users_permissions_user: userId,
        sessionId: sessionId,
      },
      sort: ['createdAt:desc'],
      limit: 5,
    })

    const messages = lastMessages.map((msg) => ({
      role: msg.role,
      content: msg.message,
    }))

    messages.push({
      role: 'user',
      content: message,
    })

    try {
      // Get relevant context from AstraDB
      const db = connectToDatabase();
      const collection = await db.collection("posts_collection");
      
      // Generate embedding for the user's query
      const openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY,
      });
      
      const embedding = await openai.embeddings.create({
        model: "text-embedding-3-small",
        input: message,
      });
      
      const queryVector = embedding.data[0].embedding;
      
      // Find similar documents in AstraDB
      const results = await collection.find({}, {
        sort: {
          $vector: queryVector
        },
        limit: 5
      }).toArray();
      
      // Prepare context from search results
      let contextFromDB = "";
      if (results && results.length > 0) {
        contextFromDB = "Th√¥ng tin li√™n quan:\n" + 
          results.map(doc => doc.text).join("\n\n");
      }
  
      // Prepend the system prompt to the messages array
      const messagesWithSystemPrompt = [
        { role: "system", content: systemPrompt },
        ...messages,
      ]
      
      // Add context if available
      if (contextFromDB) {
        messagesWithSystemPrompt.push({ 
          role: "system", 
          content: `S·ª≠ d·ª•ng th√¥ng tin sau ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng:\n${contextFromDB}` 
        });
      }
  
      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: messagesWithSystemPrompt as ChatCompletionMessageParam[],
        temperature: 0.7,
      })

      await strapi.entityService.create('api::message.message', {
        data: {
          role: 'user',
          message: message,
          users_permissions_user: userId,
          sessionId: sessionId,
        },
      })

      await strapi.entityService.create('api::message.message', {
        data: {
          role: 'assistant',
          message: response.choices[0].message.content,
          users_permissions_user: userId,
          sessionId: sessionId,
        },
      })
  
      return response.choices[0].message.content || "Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi t·ª´ AI."
    } catch (error) {
      console.error("Error in AI chat:", error)
      return "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau."
    }
    
  },


  async getMessages(ctx) {
    const { sessionId } = ctx.request.query;
    const messages = await strapi.entityService.findMany('api::message.message', {
      filters: {
        sessionId: sessionId,
      },
      sort: ['createdAt:desc'],
    })

    return messages;
  }
};
